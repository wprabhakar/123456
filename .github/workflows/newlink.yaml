name: newlink

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  AWS_ACCESS_KEY_ID: $${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: $${{ secrets.AWS_SECRET_ACCESS_KEY }} 
  BUCKET_TF_STATE: $${{ secrets.BUCKET_TF_STATE }}

permissions:
  contents: read
  pull-requests: write

jobs:
  changes:
    runs-on: ubuntu-latest
    # Set job outputs to values from filter step
    outputs:
      infra: ${{ steps.filter.outputs.infra }}
      newlink: ${{ steps.filter.outputs.newlink }}
    steps:
    - uses: actions/checkout@v3
    # For pull requests it's not necessary to checkout the code
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          infra:
            - 'infra/**'
          newlink:
            - 'newlink/**'
  newlink:
    needs: [ changes ]
    if: ${{ needs.changes.outputs.newlink == 'true' }}
    name: Build newlink
    runs-on: ubuntu-22.04
    # defaults:
    #   run:
    #     shell: bash
    steps:
    - uses: actions/checkout@v3
    - name: Install Rust
      run: curl https://sh.rustup.rs -sSf | sh -s -- -y
    - name: Install Cargo Lambda
      run: pip3 install cargo-lambda 
    - name: Build
      working-directory: ./newlink    
      run: cargo lambda build --release
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.S3_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.S3_AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-1     
    - name: Upload newlink to S3
      id: newlinkS3
      uses: swimlane/s3-upload-file-action@master
      with:
        aws_key_id: $${{ secrets.S3_AWS_ACCESS_KEY_ID }}
        aws_secret_access_key: $${{ secrets.S3_AWS_SECRET_ACCESS_KEY }}         
        aws_bucket: shorurls-api-rust
        file_path: './target/lambda/bootstrap/bootstrap'
        file_mime_type: 'application/zip'
        dest_dir: 'newlink'
    # - name: Upload S3    
    #   uses: shallwefootball/s3-upload-action@master
    #   id: S3
    #   with:
    #     aws_key_id: $${{ secrets.S3_AWS_ACCESS_KEY_ID }}
    #     aws_secret_access_key: $${{ secrets.S3_AWS_SECRET_ACCESS_KEY }}         
    #     aws_bucket: waltergun51-terraform-remote-state-one
    #     source_dir: cypress/reports/Result    
    - name: Link To Report
      run: echo "https://s3.amazonaws.com/${{steps.newlinkS3.outputs.object_location}}/${{steps.newlinkS3.outputs.object_key}}/newlink"            

  infra:
    needs: [ changes, newlink ]
    if: |
      ${{  always() && ( needs.changes.outputs.infra == 'true' || needs.changes.outputs.newlink == 'true' ) }}
    name: Deploy Lambda
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./infra    
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.6
        terraform_wrapper: false            
    - name: Terraform Init
      id: init
      run: terraform init 
      #-backend-config="bucket=$BUCKET_TF_STATE"
      # env:
      #   AWS_ACCESS_KEY_ID: $${{ secrets.S3_AWS_ACCESS_KEY_ID }}
      #   AWS_SECRET_ACCESS_KEY: $${{ secrets.S3_AWS_SECRET_ACCESS_KEY }} 
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      continue-on-error: true
    - name: Terraform Validate
      uses: hashicorp/terraform-github-actions/validate@v0.3.7
    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          </details>
          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false

    # - name: Sync S3
    #   uses: jakejarvis/s3-sync-action@master
    #   env:
    #     SOURCE_DIR: './src'
    #     AWS_REGION: 'us-east-1'
    #     AWS_S3_BUCKET: '[BUCKET_NAME_HERE]'
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}      
